#! /bin/bash 
#  
#  RACadd2grp - Rockefeller Archive Center  Add User Organization group
#
#  Add a USER to a "org" group    
#
#  1) Verify the user exists 
#  2) Verify the group exists
#  3) Add the user to the group.	
#
#
#  USAGE:
#    RACadd2grp <group> <user>
#	
#
#  Logging:  Output and error messages are placed in the the system log. 
#                  tail -f /var/log/messages to view output in real time
#
#
#  To run in DEBUG mode, set debug=1  
#         
#
# ---------------------- Return Codes -------------------------
#             1 - General Fail - Operation not completed.
#             2 - No input parameters, Must have at least at least two arguments to run
#             3 - The user does not exits. 
#             4 - The Group does not exits. 
#             5 - The user is already part of a "org" group.  Only allowed in 1 Rockefeller Archive groupi
#             6 - usermod failed, see system log for return code from usermod. 
# 
#  $Id: RACadd2grp,v 1.00 8/02/2017 URDB dI$
#
#
# Write a message to syslog and stderr, depending on the verboseness level
# Arguments are LEVEL MESSAGE; LEVEL is either "err" or "info".
log ()
{
  
  if [ $# -le 1 ]; then
    echo "RACaddrgrp: Must have at least two arguments to log()" 1>&2
    return 1
  fi
 
  FACILITY="$1"
  shift
  case "$FACILITY" in
    err|info|debug) : ;;
    *)  echo "RACadd2grp: I do not recognize level '$FACILITY' " 1>&2 ;;
  esac
      logger "RACadd2grp: $FACILITY:  $@"
}

 

#-------------------------------------------------MAIN---------------------------------------
#
#  Set some variabilities
#
log info "RACadd2grp started at $(date)"
#
# set to 1 to turn on Debugging
#
debug=0
INTERACTIVE_MODE=0
PROGNAME="$0"
target_user=$2
target_group=$1

if [ $# -lt 2 ]; then
   log err "Error, RACadd2grp requires two inpput arguments, terminating"
   exit 2
else
   if [ $1 = "manual" ]; then
      INTERACTIVE_MODE=1
      log info "Running in Interactive Mode"
   fi
fi

#
#  -u  Treat unset variables as an error when substituting.
#
set -u

#  Verify the group exists.
if [ $(getent group $1) ]; then
  log info "Group $1 found."
else
  log err "Group $1 does not exist, terminiting."
  exit 3
fi


#  Verify the user exists.
if [ -z "$(getent passwd $2 )" ]; then
  log err "User $2 does not exist, terminiting."
  exit 4
fi
log info "User $2 found"

#
# Get a list of what groups the user is in.
#
org="org"
currentgroup=$(groups $2)
if  [[ $currentgroup == *"org"* ]] ; then 
   log err "User: $2 already exists in an org group $currentgroup, terminating." 
   exit 5
fi

#
# We made it this far,  time to add the user to the group
#
usermod -G $1 $2
rc=$?; if [[ $rc != 0 ]]; then 
   log err "Failed to add $2 to group $1,  return code from usermod: $rc, terminating"
   exit 6
fi
log info "User $2 added to Group $1" 

exit 0
##########################################################################################################################
